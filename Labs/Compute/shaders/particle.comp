#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};

layout(std430, binding = 1) buffer velocityBuffer
{
	vec4 velocity[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

uniform vec2 gravityPoint;

const float dt = 0.01;

void main()
{
	uint gid = gl_GlobalInvocationID.x;

	vec3 pos = position[gid].xyz;
	vec3 vel = velocity[gid].xyz;

	float dist = length( gravityPoint - pos.xy );
	float aLen = 1 / ( dist * dist );
	vec2 aDir = normalize( gravityPoint - pos.xy );

	vec3 npos = pos + vel * dt;

	if(npos.x <= -1.0 || npos.x >= 1.0) { 
		npos -= vel * dt;
		vel.x = -vel.x;
		vel *= 0.9;
		}
	if(npos.y <= -1.0 || npos.y >= 1.0) { 
		npos -= vel * dt;
		vel.y = -vel.y;
		vel *= 0.9;
		}
	if(npos.z <= -1.0 || npos.z >= 1.0) { 
		npos -= vel * dt;
		vel.z = -vel.z;
		vel *= 0.9;
		}

	vec3 nvel = vel + vec3(aDir * aLen * dt * 0.0001,0.0);

	position[gid].xyz = npos;
	velocity[gid].xyz = nvel;
}