#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};

layout(std430, binding = 1) buffer velocityBuffer
{
	vec4 velocity[];
};

layout(std430, binding = 2) buffer positionBufferTmp
{
	vec4 positionTmp[];
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main()
{
	float timeDiff = 0.1;
	float weight = 0.9;

	uint gidX = gl_GlobalInvocationID.x;
	uint gidY = gl_GlobalInvocationID.y;

	vec3 pos = positionTmp[gidX*64+gidY].xyz;
	vec3 vel = velocity[gidX*64+gidY].xyz;
	
	vec3 nVel = vec3(0,0,0);

	for(int index = 0; index<4; index++){
		int x = index - 2;
		if(index == 0)
			x = -1;
		int y = 1;
		if(index == 0)
			y = 0;
		if(
			gidX + x >= 0 && gidX + x <= 63 && 
			gidX - x >= 0 && gidX - x <= 63 && 
			gidY + y >= 0 && gidY + y <= 63 && 
			gidY - y >= 0 && gidY - y <= 63 
		){
			vec3 A = positionTmp[(gidX+x)*64+(gidY+y)].xyz;
			vec3 B = positionTmp[(gidX-x)*64+(gidY-y)].xyz;

			vec3 A2BDir = normalize(B - A);
			vec3 A2Pos = pos - A;
			float A2PosProjDistance = dot(A2BDir,A2Pos);
			vec3 posProj = A + A2PosProjDistance * A2BDir;
			vec3 proj = posProj - pos;
			nVel += proj * weight * 0.5;
		}
		else if(
			gidX + x >= 0 && gidX + x <= 63 && 
			gidY + y >= 0 && gidY + y <= 63
		) {
			vec3 A = positionTmp[(gidX + x)*64+(gidY + y)].xyz;
			vec3 B = positionTmp[(gidX + 2 * x)*64+(gidY + 2 * y)].xyz;

			vec3 A2BDir = normalize(B - A);
			vec3 A2Pos = pos - A;
			float A2PosProjDistance = dot(A2BDir,A2Pos);
			vec3 posProj = A + A2PosProjDistance * A2BDir;
			vec3 proj = posProj - pos;
			nVel += proj * weight * 0.5;
		}
	}
	
	velocity[gidX*64+gidY].xyz = vel + nVel;
	positionTmp[gidX*64+gidY].xyz = pos + timeDiff * nVel;
	

}