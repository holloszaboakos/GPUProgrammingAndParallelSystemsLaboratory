#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};

layout(std430, binding = 1) buffer velocityBuffer
{
	vec4 velocity[];
};

layout(std430, binding = 2) buffer positionBufferTmp
{
	vec4 positionTmp[];
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main()
{
	float timeDiff = 0.1;
	float weight = 2;

	uint gidX = gl_GlobalInvocationID.x;
	uint gidY = gl_GlobalInvocationID.y;

	vec3 pos = positionTmp[gidX*64+gidY].xyz;
	vec3 vel = velocity[gidX*64+gidY].xyz;

	vec3 nVel = vec3(0,0,0);

	for(int x = -1; x<=1; x++)
		if(gidX + x >= 0 && gidX + x <= 63 )
			for(int y = -1; y<=1; y++)
				if(gidY + y >= 0 && gidY + y <= 63 ){
					vec3 nPos = positionTmp[(gidX+x)*64+(gidY+y)].xyz;
					nVel += normalize(nPos-pos)*(length(nPos-pos)-(1.0 * length(vec2(x,y)) / 63))*0.5*weight;
				}

	//TODO implement distance constraint	
	velocity[gidX*64+gidY].xyz = vel + nVel;
	positionTmp[gidX*64+gidY].xyz = pos + timeDiff * nVel;
}